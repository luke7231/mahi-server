generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id            Int       @id @default(autoincrement())
  title         String
  lat           Float
  lng           Float
  img           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  address       String?
  owner         String?
  contactNumber String?
  closingHours  String?
  likes         Like[]
  products      Product[] // Store와 Product의 관계 설정
  area1         String    @default("")
  area2         String    @default("")
  area3         String    @default("")
  area4         String    @default("")
  Seller        Seller[]
  menus         Menu[]

  @@map("store")
}

model Product {
  id            Int           @id @default(autoincrement())
  store         Store         @relation(fields: [storeId], references: [id])
  storeId       Int
  name          String
  img           String?
  price         Float
  discountPrice Float?
  quantity      Int
  description   String?
  saleEndTime   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  orderIds      Order[]
  isSoldout     Boolean       @default(false)
  isEnd         Boolean?
  menus         ProductMenu[] // 중간 테이블과 관계

  @@map("product")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?
  email       String    @unique
  password    String?
  phone       String?   @unique
  dateOfBirth DateTime?
  gender      String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  likes       Like[]
  push_token  String?
  kakaoId     BigInt?
  appleId     String?
  isDeleted   Boolean?
  orders      Order[]

  @@map("user")
}

model Order {
  id            Int       @id @default(autoincrement())
  orderId       String    @unique
  amount        Float
  coupon        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  products      Product[]
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  totalQuantity Int
  totalDiscount Float
  isApproved    Boolean   @default(false)

  @@map("order")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  storeId   Int
  createdAt DateTime @default(now())
  store     Store    @relation(fields: [storeId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@index([storeId], map: "Like_storeId_fkey")
  @@map("like")
}

model Expo_Token {
  token     String   @unique
  createdAt DateTime @default(now())
  area1     String   @default("")
  area2     String   @default("")
  area3     String   @default("")
  area4     String   @default("")

  @@map("expo_Token")
}

model Seller {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  contactNumber String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  store   Store? @relation(fields: [storeId], references: [id])
  storeId Int? // Store와 일대일 관계 설정

  @@map("seller")
}

model Menu {
  id      Int     @id @default(autoincrement())
  name    String
  price   Float
  img     String?
  store   Store   @relation(fields: [storeId], references: [id])
  storeId Int

  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  products  ProductMenu[] // 중간 테이블과 관계

  @@map("menu")
}

model ProductMenu {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  menu      Menu    @relation(fields: [menuId], references: [id])
  menuId    Int
  quantity  Int     // 추가된 수량 정보
  img       String? // 각 메뉴별 이미지 정보 추가

  @@map("productMenu")
}
